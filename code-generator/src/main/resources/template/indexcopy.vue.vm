<template>
   <div class="app-container calendar-list-container">
    #if(${isSearch})
        <div class="filter-container">
            <el-button class="filter-item" type="primary" v-waves  @click="handleFilter">刷新</el-button>
            <el-button class="filter-item" type="primary" v-waves  @click="resetTemp">重置</el-button>
            <el-button class="filter-item" style="margin-left: 10px;" @click="handleCreate" type="primary" icon="edit">添加</el-button>

            <div style="text-align: right" class="filter-container-right">
                <el-input @keyup.enter.native="handleFilter" style="width: 200px;" class="filter-item" placeholder="姓名或账户" v-model="listQuery.name"> </el-input>
                <el-button class="filter-item" type="primary" v-waves icon="search" @click="handleFilter">搜索</el-button>
                <el-dropdown  :hide-on-click="false" class="filter-item" style="margin-left: 10px;">
                  <el-button type="primary"  icon="setting" />
                  <el-dropdown-menu slot="dropdown">
                    <el-dropdown-item  v-for="item in Object.keys(tableTitles)">  <el-checkbox  v-model="tableTitles[item].checked" >{{tableTitles[item].name}}</el-checkbox></el-dropdown-item>
                  </el-dropdown-menu>
                </el-dropdown>
           </div>
        </div>
    #end
    <el-table :key='tableKey' :data="list" v-loading.body="listLoading" border fit highlight-current-row style="width: 100%">
        #foreach($column in $columns)
            <el-table-column  align="center" label="${column.comments}"   #if(${isSearch}) v-if="tableTitles['${column.columnAlias}'].checked" #end  >
              <template scope="scope">
                <span>{{scope.row.${column.columnAlias}}}</span>
              </template>
            </el-table-column>
        #end
      #if(${isOpt})
        <el-table-column fixed="right" align="center" label="操作" width="150"> <template scope="scope">
          <el-button v-if="${secondModuleName}Manager_btn_edit" size="small" type="success" @click="handleUpdate(scope.row)">编辑
          </el-button>
          <el-button v-if="${secondModuleName}Manager_btn_del" size="small" type="danger" @click="handleDelete(scope.row)">删除
          </el-button>
        </template> </el-table-column>
      #end
    </el-table>

#if(${isPage})
    <div v-show="!listLoading" class="pagination-container"  >
      <el-pagination @size-change="handleSizeChange" @current-change="handleCurrentChange" :current-page.sync="listQuery.page" :page-sizes="[10,20,30, 50]" :page-size="listQuery.limit" layout="total, sizes, prev, pager, next, jumper" :total="total"> </el-pagination>
    </div>
#end

    <el-dialog :title="textMap[dialogStatus]" :visible.sync="dialogFormVisible">
      <el-form :model="form" :rules="rules" ref="form" label-width="100px">
#foreach($column in $columns)
  #if($column.columnName != $pk.columnName)
    <el-form-item label="${column.comments}" prop="${column.columnAlias}">
      <el-input v-model="form.${column.columnAlias}" placeholder="请输入${column.comments}"></el-input>
    </el-form-item>
  #end
#end
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button @click="cancel('form')">取 消</el-button>
        <el-button v-if="dialogStatus=='create'" type="primary" @click="create('form')">确 定</el-button>
        <el-button v-else type="primary" @click="update('form')">确 定</el-button>
      </div>
    </el-dialog>
  </div>
</template>

<script>
  import {
      page,
      addObj,
      getObj,
      delObj,
      putObj
  } from '@/api/${moduleName}/${secondModuleName}/index';

  export default {
    name: '${secondModuleName}',
    data() {
      return {
#if(${isSearch})
        tableTitles:{
#foreach($column in $columns)
           ${column.columnAlias}:{name:'${column.comments}',checked:#if(${column.columnAlias} != 'id')true #else false#end},
#end},
#end
        form: {
#foreach($column in $columns)
  #if($column.columnName != $pk.columnName)
    ${column.columnAlias} : undefined#if($velocityCount != $columns.size()),#end
  #end
#end
        },
        rules: {
#foreach($column in $columns)
  #if($column.columnName != $pk.columnName)
${column.columnAlias}: [
  {required: true, message: '请输入${column.comments}', trigger: 'blur'},
  {min: 3, max: 20, message: '长度在 3 到 20 个字符', trigger: 'blur'}
]#if($velocityCount != $columns.size()), #end#end
#end
        },
        list: null,
        total: null,
        listLoading: true,
        listQuery: {
          page: 1,
          limit: 20,
          name: undefined
        },
        dialogFormVisible: false,
        dialogStatus: '',
        textMap: {
          update: '编辑',
          create: '创建'
        },
        tableKey: 0
      }
    },
    created() {
      this.getList();
    },
    methods: {
      getList() {
        this.listLoading = true;
        page(this.listQuery)
            .then(response => {
          this.list = response.data.rows;
        this.total = response.data.total;
        this.listLoading = false;
      })
      },
      handleFilter() {
        this.getList();
      },
      handleSizeChange(val) {
        this.listQuery.limit = val;
        this.getList();
      },
      handleCurrentChange(val) {
        this.listQuery.page = val;
        this.getList();
      },
      handleCreate() {
        this.resetTemp();
        this.dialogStatus = 'create';
        this.dialogFormVisible = true;
      },
      handleUpdate(row) {
        getObj(row.id)
            .then(response => {
          this.form = response.data;
        this.dialogFormVisible = true;
        this.dialogStatus = 'update';
      });
      },
      handleDelete(row) {
          this.$Toast.confirm().then(() => {
              delObj(row.id).then(() => {
              this.$Toast.notify("删除成功")
              const index = this.list.indexOf(row);
              this.list.splice(index, 1);
      });});},
      create(formName) {
        const set = this.$refs;
        set[formName].validate(valid => {
            if (valid) {
                addObj(this.form)
                .then(() => {
                this.dialogFormVisible = false;
                this.getList();
                this.$Toast.notify("创建成功")
                })
            } else {
                return false;
            }});},
      cancel(formName) {
        this.dialogFormVisible = false;
        const set = this.$refs;
        set[formName].resetFields();
      },
      update(formName) {
        const set = this.$refs;
        set[formName].validate(valid => {
        if (valid) {
            this.dialogFormVisible = false;
            this.form.password = undefined;
            putObj(this.form.id, this.form).then(() => {
                this.dialogFormVisible = false;
                this.getList();
                this.$Toast.notify("更新成功")
            });
        } else {
             return false;
        }});
      },
      resetTemp() {
        this.form ={
              #foreach($column in $columns)
                  #if($column.columnName != $pk.columnName)
                      ${column.columnAlias} : undefined#if($velocityCount != $columns.size()),#end
                  #end
              #end
          };
      }
    }
  }
</script>
